<?php

namespace lib;

use \org\bovigo\vfs as vfs;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-24 at 13:22:07.
 */
class XmlRoutesProviderTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var XmlRoutesProvider
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new XmlRoutesProvider;
        vfs\vfsStreamWrapper::register();
        vfs\vfsStreamWrapper::setRoot(new vfs\vfsStreamDirectory('root'));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    // <editor-fold defaultstate="collapsed" desc="setRoutesFile">

    /**
     * @covers lib\XmlRoutesProvider::setRoutesFile
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode lib\XmlRoutesProvider::INCORRECT_FILE
     */
    public function testSetRoutesFile_FileEmpty()
    {
        $this->object->setRoutesFile('');
    }

    /**
     * @covers lib\XmlRoutesProvider::setRoutesFile
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode lib\XmlRoutesProvider::INCORRECT_FILE
     */
    public function testSetRoutesFile_FileNameIsBool()
    {
        $this->object->setRoutesFile(TRUE);
    }

    /**
     * @covers lib\XmlRoutesProvider::setRoutesFile
     */
    public function testSetRoutesFile_CorrectFile()
    {
        // On simule un fichier "routes.xml" dans le dossier "root", racine de l'arborescence
        vfs\vfsStream::newFile("routes.xml")->at(vfs\vfsStreamWrapper::getRoot());
        $this->object->setRoutesFile(vfs\vfsStream::url('root/routes.xml'));

        $this->assertAttributeEquals(vfs\vfsStream::url('root/routes.xml'),
                                                        'routesFile',
                                                        $this->object);
    }

    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="__construct">

    /**
     * @covers lib\XmlRoutesProvider::__construct
     */
    public function testConstruct_FileEmpty()
    {
        $this->object = new XmlRoutesProvider('');
        $this->assertAttributeEquals('', 'routesFile', $this->object);
    }

    /**
     * @covers lib\XmlRoutesProvider::__construct
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode lib\XmlRoutesProvider::INCORRECT_FILE
     */
    public function testConstruct_FileNameIsInt()
    {
        $this->object = new XmlRoutesProvider(2);
    }

    /**
     * @covers lib\XmlRoutesProvider::__construct
     */
    public function testConstruct_CorrectFile()
    {
        // On simule un fichier "routes.xml" dans le dossier "root", racine de l'arborescence
        vfs\vfsStream::newFile("routes.xml")->at(vfs\vfsStreamWrapper::getRoot());
        $this->object = new XmlRoutesProvider(vfs\vfsStream::url('root/routes.xml'));

        $this->assertAttributeEquals(vfs\vfsStream::url('root/routes.xml'),
                                                        'routesFile',
                                                        $this->object);
    }

    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="getAvailableRoutes">

    /**
     * @covers lib\XmlRoutesProvider::getAvailableRoutes
     * @expectedException \RuntimeException
     * @expectedExceptionCode lib\XmlRoutesProvider::NO_FILE
     */
    public function testGetAvailableRoutes_NoFileSpecified()
    {
        $this->object->getAvailableRoutes();
    }

    /**
     * @covers lib\XmlRoutesProvider::getAvailableRoutes
     * @expectedException \RuntimeException
     * @expectedExceptionCode lib\XmlRoutesProvider::INCORRECT_FILE 
     */
    public function testGetAvailableRoutes_RoutesPathIsNotFile()
    {
        vfs\vfsStream::newDirectory("routes")->at(vfs\vfsStreamWrapper::getRoot());
        $this->object->setRoutesFile(vfs\vfsStream::url('root/routes'));

        $this->object->getAvailableRoutes();
    }

    /**
     * @covers lib\XmlRoutesProvider::getAvailableRoutes
     * @expectedException \PHPUnit_Framework_Error_Warning
     * @expectedExceptionCode E_WARNING
     * @expectedExceptionMessage Document is empty in
     */
    public function testGetAvailableRoutes_RoutesFileIsEmpty()
    {
        vfs\vfsStream::newFile("routes.xml")->at(vfs\vfsStreamWrapper::getRoot());
        $this->object->setRoutesFile(vfs\vfsStream::url('root/routes.xml'));

        $this->object->getAvailableRoutes();
    }

    /**
     * @covers lib\XmlRoutesProvider::getAvailableRoutes
     * @expectedException \PHPUnit_Framework_Error_Warning
     * @expectedExceptionCode E_WARNING
     * @expectedExceptionMessage Start tag expected, '<' not found in
     */
    public function testGetAvailableRoutes_InvalidXmlFile()
    {
        $content = 'blablabla';
        vfs\vfsStream::newFile("routes.xml")
                ->setContent($content)
                ->at(vfs\vfsStreamWrapper::getRoot());
        $this->object->setRoutesFile(vfs\vfsStream::url('root/routes.xml'));

        $this->object->getAvailableRoutes();
    }

    /**
     * @covers lib\XmlRoutesProvider::getAvailableRoutes
     * @expectedException \RuntimeException
     * @expectedExceptionCode lib\XmlRoutesProvider::NO_ROUTE
     */
    public function testGetAvailableRoutes_NoRouteInFile()
    {
        $content =
                '<?xml version="1.0" encoding="iso-8859-1" ?>
             <routes>
             </routes>';
        vfs\vfsStream::newFile("routes.xml")
                ->setContent($content)
                ->at(vfs\vfsStreamWrapper::getRoot());
        $this->object->setRoutesFile(vfs\vfsStream::url('root/routes.xml'));

        $this->object->getAvailableRoutes();
    }

    /**
     * @covers lib\XmlRoutesProvider::getAvailableRoutes
     */
    public function testGetAvailableRoutes_OneRouteInFile()
    {
        $routeUrl = "/news.html";
        $content  =
                '<?xml version="1.0" encoding="iso-8859-1" ?>
                 <routes>
                    <route url="' . $routeUrl . '" module="News" action="index" />
                 </routes>';
        vfs\vfsStream::newFile("routes.xml")
                ->setContent($content)
                ->at(vfs\vfsStreamWrapper::getRoot());
        $this->object->setRoutesFile(vfs\vfsStream::url('root/routes.xml'));

        $availableRoutes = $this->object->getAvailableRoutes();

        $this->assertEquals(1, count($availableRoutes));
        $this->assertAttributeEquals($routeUrl, 'url', $availableRoutes[0]);
    }

    /**
     * @covers lib\XmlRoutesProvider::getAvailableRoutes
     */
    public function testGetAvailableRoutes_RouteWithVars()
    {
        $vars    = "var1, var2";
        $content =
                '<?xml version="1.0" encoding="iso-8859-1" ?>
                 <routes>
                    <route url="/news.html" module="News" action="index" vars="' . $vars . '" />
                 </routes>';
        vfs\vfsStream::newFile("routes.xml")
                ->setContent($content)
                ->at(vfs\vfsStreamWrapper::getRoot());
        $this->object->setRoutesFile(vfs\vfsStream::url('root/routes.xml'));

        $availableRoutes = $this->object->getAvailableRoutes();

        $this->assertEquals(1, count($availableRoutes));
        $varsArray = array("var1", "var2");
        $this->assertAttributeEquals($varsArray, 'varsNames',
                                     $availableRoutes[0]);
    }

    /**
     * @covers lib\XmlRoutesProvider::getAvailableRoutes
     */
    public function testGetAvailableRoutes_ThreeRoutesInFile()
    {
        $content =
                '<?xml version="1.0" encoding="iso-8859-1" ?>
                 <routes>
                    <route url="news1.html" module="News1" action="index1" />
                    <route url="news2.html" module="News2" action="index2" />
                    <route url="news3.html" module="News3" action="index3" vars="a, b , c"/>
                 </routes>';
        vfs\vfsStream::newFile("routes.xml")
                ->setContent($content)
                ->at(vfs\vfsStreamWrapper::getRoot());
        $this->object->setRoutesFile(vfs\vfsStream::url('root/routes.xml'));

        $availableRoutes = $this->object->getAvailableRoutes();

        $this->assertEquals(3, count($availableRoutes));
        $this->assertAttributeEquals('News1', 'module', $availableRoutes[0]);
        $this->assertAttributeEquals('index2', 'action', $availableRoutes[1]);
        $this->assertAttributeEquals(array('a', 'b', 'c'), 'varsNames',
                                     $availableRoutes[2]);
    }

    // </editor-fold>
}
