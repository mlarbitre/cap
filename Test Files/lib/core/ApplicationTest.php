<?php

namespace lib\core;

class TestApplication extends Application
{
    /**
     * Surcharge du constructeur pour lui passer le nom de l’application
     */
    public function __construct()
    {
        parent::__construct('test');
    }
    
    /**
     * Surcharge de la méthode "run"
     */
    public function run()
    {
        ;
    }
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-23 at 15:07:23.
 */
class ApplicationTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Application
     */
    protected $object;

    /**
     * @var \ReflectionClass 
     */
    private $reflectedHttpRequest;
    
    /**
     * @var \ReflectionClass 
     */
    private $reflectedHttpResponse;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new TestApplication;
        
        $tempHttpRequest = new HttpRequest();
        $this->reflectedHttpRequest = new \ReflectionClass($tempHttpRequest);
        
        $tempHttpResponse = new HttpResponse();
        $this->reflectedHttpResponse = new \ReflectionClass($tempHttpResponse);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers \lib\core\Application::httpRequest
     */
    public function testHttpRequest()
    {
        $this->assertInstanceOf($this->reflectedHttpRequest->getName(), $this->object->httpRequest());
    }
    
    /**
     * @covers \lib\core\Application::httpResponse
     */
    public function testHttpResponse()
    {
        $this->assertInstanceOf($this->reflectedHttpResponse->getName(), $this->object->httpResponse());
    }
    
    /**
     * @covers \lib\core\Application::httpResponse
     */
    public function testName()
    {
        $this->assertEquals('test', $this->object->name());
        $this->assertNotEquals('blabla', $this->object->name());
    }
}
