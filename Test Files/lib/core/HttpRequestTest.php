<?php

namespace lib\core;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-22 at 06:30:43.
 */
class HttpRequestTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var HttpRequest
     */
    protected $object;

    /**
     * La rÃ©flection de l'objet de test
     * @var ReflectionClass 
     */
    protected $reflectedObject;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object          = new HttpRequest;
        $this->reflectedObject = new \ReflectionClass($this->object);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    // <editor-fold defaultstate="collapsed" desc="getExists">
    /**
     * @covers lib\core\HttpRequest::getExists
     * expectedException InvalidArgumentException
     * expectedExceptionCode lib\core\HttpRequest::CLE_VIDE
     * expectedExceptionMessage someMessage
     */
    public function testGetExists_EmptyKey()
    {
        $this->setExpectedException('\InvalidArgumentException',
                                    $this->reflectedObject->getShortName() . '::' . $this->reflectedObject->getMethod('getExists')->getName(),
                                                                                                                      HttpRequest::CLE_VIDE);
        $this->object->getExists('');
    }

    /**
     * @covers lib\core\HttpRequest::getExists
     */
    public function testGetExists_NotExistingKey()
    {
        $this->assertFalse($this->object->getExists('a'));
    }

    /**
     * @covers lib\core\HttpRequest::getExists
     */
    public function testGetExists_ExistingKey()
    {
        $_GET['a'] = '';
        $this->assertTrue($this->object->getExists('a'));
        unset($_GET['a']);
    }

    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="getData">
    /**
     * @covers lib\core\HttpRequest::getData
     * @covers lib\core\HttpRequest::getExists
     * expectedException InvalidArgumentException
     * expectedExceptionCode lib\core\HttpRequest::CLE_VIDE
     * expectedExceptionMessage someMessage
     */
    public function testGetData_EmptyKey()
    {
        $this->setExpectedException('\InvalidArgumentException',
                                    $this->reflectedObject->getShortName() . '::' . $this->reflectedObject->getMethod('getExists')->getName(),
                                                                                                                      HttpRequest::CLE_VIDE);
        $this->object->getData('');
    }

    /**
     * @covers lib\core\HttpRequest::getData
     */
    public function testGetData_NotExistingKey()
    {
        $this->assertNull($this->object->getData('a'));
    }

    /**
     * @covers lib\core\HttpRequest::getData
     */
    public function testGetData_ExistingKey()
    {
        $_GET['a'] = '1';
        $this->assertEquals($this->object->getData('a'), $_GET['a']);
        unset($_GET['a']);
    }

    // </editor-fold>
}
