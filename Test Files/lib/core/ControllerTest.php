<?php

namespace lib\core;

class TestController extends Controller
{

    public function module()
    {
        return $this->module;
    }

    public function action()
    {
        return $this->action;
    }

    public function view()
    {
        return $this->view;
    }

    /**
     * Une « bonne » action pour le test
     * @param \lib\core\HttpRequest $httpRequest
     */
    public function executeAGoodAction(HttpRequest $httpRequest)
    {
        return $this->text;
    }

    public $text = 'It\'s a good test';

}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-14 at 07:10:54.
 */
class ControllerTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Application
     */
    protected $app;

    /**
     * @var Controller
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->app    = new \test\TestApplication;
        $this->object = new TestController($this->app, 'testModule', 'testAction');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        unset($this->app);
    }

    // <editor-fold defaultstate="collapsed" desc="setModule">
    /**
     * @covers lib\core\Controller::setModule
     * @covers lib\core\Controller::__construct
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode lib\core\Controller::BAD_MODULE
     */
    public function testSetModule_NoModule()
    {
        $controller = new TestController($this->app, '', 'action');
    }

    /**
     * @covers lib\core\Controller::setModule
     * @covers lib\core\Controller::__construct
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode lib\core\Controller::BAD_MODULE
     */
    public function testSetModule_ModuleCanNotBeInt()
    {
        $controller = new TestController($this->app, 1, 'action');
    }

    /**
     * @covers lib\core\Controller::setModule
     * @covers lib\core\Controller::__construct
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode lib\core\Controller::BAD_MODULE
     */
    public function testSetModule_ModuleCanNotBeBool()
    {
        $controller = new TestController($this->app, FALSE, 'action');
    }

    /**
     * @covers lib\core\Controller::setModule
     * @covers lib\core\Controller::__construct
     */
    public function testSetModule_ModuleIsString()
    {
        $nomModule  = 'unBonNom';
        $controller = new TestController($this->app, $nomModule, 'action');
        $this->assertEquals($nomModule, $controller->module());
    }

    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="setAction">
    /**
     * @covers lib\core\Controller::setAction
     * @covers lib\core\Controller::__construct
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode lib\core\Controller::BAD_ACTION
     */
    public function testSetAction_NoAction()
    {
        $controller = new TestController($this->app, 'module', '');
    }

    /**
     * @covers lib\core\Controller::setAction
     * @covers lib\core\Controller::__construct
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode lib\core\Controller::BAD_ACTION
     */
    public function testSetAction_ActionCanNotBeInt()
    {
        $controller = new TestController($this->app, 'module', 1);
    }

    /**
     * @covers lib\core\Controller::setAction
     * @covers lib\core\Controller::__construct
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode lib\core\Controller::BAD_ACTION
     */
    public function testSetAction_ActionCanNotBeBool()
    {
        $controller = new TestController($this->app, 'module', TRUE);
    }

    /**
     * @covers lib\core\Controller::setAction
     * @covers lib\core\Controller::__construct
     */
    public function testSetAction_ActionIsString()
    {
        $nomAction  = 'unBonNom';
        $controller = new TestController($this->app, 'module', $nomAction);
        $this->assertEquals($nomAction, $controller->action());
    }

    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="setView">
    /**
     * @covers lib\core\Controller::setView
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode lib\core\Controller::BAD_VIEW
     */
    public function testSetView_NoView()
    {
        $this->object->setView('');
    }

    /**
     * @covers lib\core\Controller::setView
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode lib\core\Controller::BAD_VIEW
     */
    public function testSetView_ViewCanNotBeInt()
    {
        $this->object->setView(1);
    }

    /**
     * @covers lib\core\Controller::setView
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode lib\core\Controller::BAD_VIEW
     */
    public function testSetView_ViewCanNotBeBool()
    {
        $this->object->setView(FALSE);
    }

    /**
     * @covers lib\core\Controller::setView
     */
    public function testSetView_ViewIsString()
    {
        $nomView = 'unBonNom';
        $this->object->setView($nomView);
        $this->assertEquals($nomView, $this->object->view());
    }

    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="execute">

    /**
     * @covers lib\core\Controller::execute
     * @expectedException \RuntimeException
     * @expectedExceptionCode lib\core\Controller::UNKNOWN_ACTION
     */
    public function testExecute_ActionIsNotActionable()
    {
        $this->object->execute();
    }

    /**
     * @covers lib\core\Controller::execute
     */
    public function testExecute_ActionIsAGoodAction()
    {
        $controller = new TestController($this->app, 'testModule', 'aGoodAction');
        $this->assertEquals($controller->text, $controller->execute());
    }

    // </editor-fold>

    /**
     * @covers lib\core\Controller::page
     */
    public function testPage_IsPage()
    {
        $this->assertInstanceOf('\lib\core\Page', $this->object->page());
    }

}
