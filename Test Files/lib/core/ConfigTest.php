<?php

namespace lib\core;

use \org\bovigo\vfs as vfs;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-29 at 07:35:49.
 */
class ConfigTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var TestApplication 
     */
    private $app;

    /**
     * @var Config
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $app          = new \test\TestApplication();
        $this->object = new Config($app);
        vfs\vfsStreamWrapper::register();
        vfs\vfsStreamWrapper::setRoot(new vfs\vfsStreamDirectory('root'));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    // <editor-fold defaultstate="collapsed" desc="setConfigFileName">

    /**
     * @covers lib\core\Config::setConfigFileName
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode lib\core\Config::INVALID_FILENAME
     */
    public function testSetConfigFileName_FileNameEmpty()
    {
        $this->object->setConfigFileName('');
    }

    /**
     * @covers lib\core\Config::setConfigFileName
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode lib\core\Config::INVALID_FILENAME
     */
    public function testSetConfigFileName_FileNameIsBool()
    {
        $this->object->setConfigFileName(TRUE);
    }

    /**
     * @covers lib\core\Config::setConfigFileName
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode lib\core\Config::INVALID_FILENAME
     */
    public function testSetConfigFileName_FileNameIsInt()
    {
        $this->object->setConfigFileName(3564);
    }

    /**
     * @covers lib\core\Config::setConfigFileName
     */
    public function testSetConfigFileName_FileNameIsString()
    {
        $fileName = 'correctFileName';
        $this->object->setConfigFileName($fileName);
        $this->assertAttributeEquals($fileName, 'configFileName', $this->object);
    }

    // </editor-fold>

    /**
     * @covers lib\core\Config::__construct
     */
    public function testConstruct_WithAndWithoutFileName()
    {
        $this->assertAttributeEquals('', 'configFileName', $this->object);
        $testConf = new Config(new \test\TestApplication(), 'aName');
        $this->assertAttributeNotEquals('', 'configFileName', $testConf);
        $this->assertAttributeNotEquals('blabla', 'configFileName', $testConf);
        $this->assertAttributeEquals('aName', 'configFileName', $testConf);
    }

    // <editor-fold defaultstate="collapsed" desc="get">

    /**
     * @covers lib\core\Config::get
     * @expectedException \RuntimeException
     * @expectedExceptionCode lib\core\Config::INVALID_FILE
     */
    public function testGet_FileIsNotValid()
    {
        $this->object->setConfigFileName('blabla');
        $this->object->get('a');
    }

    /**
     * @covers lib\core\Config::get
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode lib\core\Config::INVALID_ASKED_VARIABLE
     */
    public function testGet_NoVar()
    {
        $this->object->get('');
    }

    /**
     * @covers lib\core\Config::get
     */
    public function testGet_UnknownVar()
    {
        $content = '<?xml version="1.0" encoding="iso-8859-1" ?>
             <definitions>
             </definitions>';
        // On simule un fichier "config.xml" dans le dossier "root", racine de l'arborescence
        vfs\vfsStream::newFile("config.xml")
                ->setContent($content)
                ->at(vfs\vfsStreamWrapper::getRoot());
        $this->object->setConfigFileName(vfs\vfsStream::url('root/config.xml'));

        $this->assertAttributeEquals(vfs\vfsStream::url('root/config.xml'),
                                                        'configFileName',
                                                        $this->object);

        $this->assertEquals(null, $this->object->get('auie'));
    }

    /**
     * @covers lib\core\Config::get
     */
    public function testGet_KnownVar()
    {
        $varName  = 'maVariable';
        $varValue = 'maValeur';

        $content = '<?xml version="1.0" encoding="iso-8859-1" ?>
             <definitions>
                <define var="' . $varName . '" value="' . $varValue . '" />
             </definitions>';
        // On simule un fichier "config.xml" dans le dossier "root", racine de l'arborescence
        vfs\vfsStream::newFile("config.xml")
                ->setContent($content)
                ->at(vfs\vfsStreamWrapper::getRoot());
        $this->object->setConfigFileName(vfs\vfsStream::url('root/config.xml'));

        $this->assertAttributeEquals(vfs\vfsStream::url('root/config.xml'),
                                                        'configFileName',
                                                        $this->object);

        $this->assertEquals($varValue, $this->object->get($varName));
    }

// </editor-fold>
}
