<?php

namespace lib\core;

class TestPage extends Page
{

    private $prefix = 'test';

    public function getVarsNumber()
    {
        return count($this->vars);
    }

    public function getView()
    {
        return $this->view;
    }

    public function extract($key)
    {
        extract($this->vars, EXTR_PREFIX_ALL, $this->prefix);
        return ${$this->prefix . '_' . $key};
    }

}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-28 at 06:49:10.
 */
class PageTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var TestPage
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $app          = new \test\TestApplication;
        $this->object = new TestPage($app);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    // <editor-fold defaultstate="collapsed" desc="addVar">

    /**
     * @covers \lib\core\Page::addVar
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode \lib\core\Page::INVALID_KEY
     */
    public function testAddVar_EmptyKey()
    {
        $this->object->addVar('', 'invalid');
    }

    /**
     * @covers \lib\core\Page::addVar
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode \lib\core\Page::INVALID_KEY
     */
    public function testAddVar_NumericKey()
    {
        $this->object->addVar(1, 'invalid');
    }

    /**
     * @covers \lib\core\Page::addVar
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode \lib\core\Page::INVALID_KEY
     */
    public function testAddVar_BooleanKey()
    {
        $this->object->addVar(true, 'invalid');
    }

    /**
     * @covers \lib\core\Page::addVar
     */
    public function testAddVar_SimpleStringVar()
    {
        $key   = 'title';
        $value = 'monTitre';
        $this->object->addVar($key, $value);

        $this->assertEquals('monTitre', $this->object->extract($key));
        $this->assertEquals(1, $this->object->getVarsNumber());
    }

    /**
     * @covers \lib\core\Page::addVar
     */
    public function testAddVar_Override()
    {
        $key   = 'title';
        $value = 'monTitre';
        $this->object->addVar($key, $value);
        $this->assertEquals($value, $this->object->extract($key));
        $this->assertEquals(1, $this->object->getVarsNumber());

        $value2 = 'monTitre2';
        $this->object->addVar($key, $value2);
        $this->assertEquals($value2, $this->object->extract($key));
        $this->assertEquals(1, $this->object->getVarsNumber());
    }

    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="setView">

    /**
     * @covers \lib\core\Page::setView
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode \lib\core\Page::INVALID_VIEW
     */
    public function testSetContentFile_EmptyKey()
    {
        $this->object->setView('');
    }

    /**
     * @covers \lib\core\Page::setView
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode \lib\core\Page::INVALID_VIEW
     */
    public function testSetContentFile_NumericKey()
    {
        $this->object->setView(1);
    }

    /**
     * @covers \lib\core\Page::setView
     * @expectedException \InvalidArgumentException
     * @expectedExceptionCode \lib\core\Page::INVALID_VIEW
     */
    public function testSetContentFile_BooleanKey()
    {
        $this->object->setView(true);
    }

    public function testSetContentFile_SimpleString()
    {
        $view = 'a';
        $this->object->setView($view);
        $this->assertEquals($view, $this->object->getView());
    }

    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="getGeneratedPage">

    /**
     * @covers \lib\core\Page::getGeneratedPage
     * @expectedException \RuntimeException
     * @expectedExceptionCode \lib\core\Page::VIEW_NOT_FOUND
     */
    public function testGetGeneratedPage_NoViewSpecified()
    {
        $this->object->getGeneratedPage();
    }
    
    /**
     * @covers \lib\core\Page::getGeneratedPage
     * @expectedException \RuntimeException
     * @expectedExceptionCode \lib\core\Page::VIEW_NOT_FOUND
     */
    public function testGetGeneratedPage_ViewNotExist()
    {
        $this->object->setView('a');
        $this->object->getGeneratedPage();
    }


    // </editor-fold>
}
